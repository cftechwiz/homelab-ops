---
# yaml-language-server: $schema=https://kubernetes-schemas.falhalla.com/helmrelease_v2beta1.json
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: otel-demo
  namespace: default
spec:
  interval: 15m
  chart:
    spec:
      chart: opentelemetry-demo
      version: 0.19.0
      sourceRef:
        kind: HelmRepository
        name: opentelemetry-demo
        namespace: flux-system
  maxHistory: 3
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    # Default values for sumo-opentelemetry-demo.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""


sumologic:
  rumUrl: ${ SUMOLOGIC_RUMURL }

  deployments:
    frontend:
      image:
        repository: public.ecr.aws/v0i4b3p5/ot-demo
        tag: frontendrum-v1.0

    frontendclicker:
      image:
        repository: public.ecr.aws/v0i4b3p5/ot-demo
        tag: frontendclicker-v1.0

  sumologic:
    logs:
      enabled: true
      metadata:
        provider: otelcol
      collector:
        otelcol:
          enabled: true

    metrics:
      enabled: true
      metadata:
        provider: otelcol

    traces:
      enabled: true

  fluent-bit:
    enabled: false

  otelagent:
    config:
      receivers:
        otlp:
          protocols:
            http:
              cors:
                allowed_origins:
                  - "http://*"
                  - "https://*"
                allowed_headers:
                  - "*"

opentelemetry-demo:
  observability:
    # collector settings are configured in the opentelemetry-collector section.
    otelcol:
      enabled: false
    jaeger:
      enabled: false

  default:
    env:
      - name: OTEL_SERVICE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: "metadata.labels['app.kubernetes.io/component']"
      - name: OTEL_K8S_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: OTEL_K8S_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: OTEL_K8S_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: OTEL_RESOURCE_ATTRIBUTES
        # yamllint disable-line rule:line-length
        value: deployment.environment=development,application=opentelemetry-demo,service.name=$(OTEL_SERVICE_NAME),k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
    image:
      repository: otel/demo
      # Overrides the image tag whose default is the chart appVersion.
      # The service's name will be applied to the end of this value.
      tag: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
    schedulingRules:
      nodeSelector: {}
      affinity: {}
      tolerations: []

  env:
      TZ: America/Chicago
      LOG_LEVEL: "info"
      PORT: &port 80
  service:
    main:
      ports:
        http:
          port: *port
    ingress:
      main:
        enabled: true
        ingressClassName: nginx
        annotations:
          hajimari.io/icon: mdi:eye-circle
          hajimari.io/group: Intranet Apps
        hosts:
          - host: &host demo.intra.falhalla.com
            paths:
              - path: /
                pathType: Prefix
        tls:
          - hosts:
              - *host
  components:
    redis:
      enabled: true
      useDefault:
        env: true
      # Options to override the default image settings.
      imageOverride:
        repository: "redis"
        tag: "alpine"
      ports:
        - name: redis
          value: 6379
      resources:
        limits:
          memory: 20Mi
      schedulingRules:
        nodeSelector: {}
        affinity: {}
        tolerations: []

    accountingService:
      enabled: true
      useDefault:
        env: true
      env:
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: 'http://{{ include "sumologic-sumologic-otelcol-svc-name" . }}:4317'
        - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          value: cumulative
        - name: KAFKA_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-kafka:9092'
      resources:
        limits:
          memory: 20Mi

    adService:
      enabled: true
      useDefault:
        env: true

      imageOverride: {}
      serviceType: ClusterIP
      schedulingRules:
        nodeSelector: {}
        affinity: {}
        tolerations: []
      servicePort: 8080
      env:
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: 'http://{{ include "sumo-opentelemetry-demo-otelagent-svc-name" . }}:4317'
        - name: AD_SERVICE_PORT
          value: "8080"
      podAnnotations: {}
      resources:
        limits:
          memory: 300Mi

    cartService:
      enabled: true
      useDefault:
        env: true

      imageOverride: {}
      serviceType: ClusterIP
      schedulingRules:
        nodeSelector: {}
        affinity: {}
        tolerations: []
      servicePort: 8080
      env:
        - name: ASPNETCORE_URLS
          value: http://*:8080
        - name: REDIS_ADDR
          value: '{{ include "otel-demo.name" . }}-redis:6379'
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: 'http://{{ include "sumo-opentelemetry-demo-otelagent-svc-name" . }}:4317'
        - name: CART_SERVICE_PORT
          value: "8080"
      podAnnotations: {}
      resources:
        limits:
          memory: 160Mi

    checkoutService:
      enabled: true
      useDefault:
        env: true

      imageOverride: {}
      serviceType: ClusterIP
      schedulingRules:
        nodeSelector: {}
        affinity: {}
        tolerations: []
      servicePort: 8080
      env:
        - name: CART_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-cartservice:8080'
        - name: CURRENCY_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-currencyservice:8080'
        - name: PAYMENT_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-paymentservice:8080'
        - name: PRODUCT_CATALOG_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-productcatalogservice:8080'
        - name: SHIPPING_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-shippingservice:8080'
        - name: EMAIL_SERVICE_ADDR
          value: 'http://{{ include "otel-demo.name" . }}-emailservice:8080'
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: 'http://{{ include "sumo-opentelemetry-demo-otelagent-svc-name" . }}:4317'
        - name: CHECKOUT_SERVICE_PORT
          value: "8080"
        - name: KAFKA_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-kafka:9092'
      podAnnotations: {}
      resources:
        limits:
          memory: 20Mi

    currencyService:
      enabled: true
      useDefault:
        env: true

      imageOverride: {}
      schedulingRules:
        nodeSelector: {}
        affinity: {}
        tolerations: []
      serviceType: ClusterIP
      servicePort: 8080
      env:
        - name: PORT
          value: "8080"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: 'http://{{ include "sumo-opentelemetry-demo-otelagent-svc-name" . }}:4317'
        - name: CURRENCY_SERVICE_PORT
          value: "8080"
      podAnnotations: {}
      resources:
        limits:
          memory: 20Mi


    emailService:
      enabled: true
      useDefault:
        env: true

      imageOverride: {}
      serviceType: ClusterIP
      schedulingRules:
        nodeSelector: {}
        affinity: {}
        tolerations: []
      servicePort: 8080
      env:
        - name: APP_ENV
          value: production
        - name: PORT
          value: "8080"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: 'http://{{ include "sumo-opentelemetry-demo-otelagent-svc-name" . }}:4317'
        - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
          value: 'http://{{ include "sumo-opentelemetry-demo-otelagent-svc-name" . }}:4318/v1/traces'
        - name: EMAIL_SERVICE_PORT
          value: "8080"
      podAnnotations: {}
      resources:
        limits:
          memory: 100Mi

    featureflagService:
      enabled: true
      useDefault:
        env: true

      imageOverride: {}
      schedulingRules:
        nodeSelector: {}
        affinity: {}
        tolerations: []
      env:
        - name: FEATURE_FLAG_GRPC_SERVICE_PORT
          value: "50053"
        - name: FEATURE_FLAG_SERVICE_PORT
          value: "8081"
        - name: OTEL_EXPORTER_OTLP_TRACES_PROTOCOL
          value: grpc
        - name: DATABASE_URL
          value: 'ecto://ffs:ffs@{{ include "otel-demo.name" . }}-ffspostgres:5432/ffs'
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: 'http://{{ include "sumo-opentelemetry-demo-otelagent-svc-name" . }}:4317'
      serviceType: ClusterIP
      ports:
        - name: grpc
          value: 50053
        - name: http
          value: 8081
      podAnnotations: {}
      resources:
        limits:
          memory: 160Mi


    frauddetectionService:
      enabled: true
      useDefault:
        env: true
      env:
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: 'http://{{ include "sumo-opentelemetry-demo-otelagent-svc-name" . }}:4317'
        - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          value: cumulative
        - name: KAFKA_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-kafka:9092'
      resources:
        limits:
          memory: 200Mi


    ffsPostgres:
      enabled: true
      useDefault:
        env: true

      imageOverride:
        repository: "postgres"
        tag: "14"
      schedulingRules:
        nodeSelector: {}
        affinity: {}
        tolerations: []
      env:
        - name: POSTGRES_DB
          value: ffs
        - name: POSTGRES_PASSWORD
          value: ffs
        - name: POSTGRES_USER
          value: ffs
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: 'http://{{ include "sumo-opentelemetry-demo-otelagent-svc-name" . }}:4317'
      serviceType: ClusterIP
      ports:
        - name: postgres
          value: 5432
      podAnnotations: {}
      resources:
        limits:
          memory: 120Mi


    frontend:
      enabled: false
      useDefault:
        env: true
      imageOverride:
        repository: public.ecr.aws/v0i4b3p5/ot-demo
        tag: frontendrum-v1.0
      schedulingRules:
        nodeSelector: {}
        affinity: {}
        tolerations: []
      serviceType: ClusterIP
      servicePort: 8080
      envOverrides: []
      env:
        - name: FRONTEND_ADDR
          value: :8080
        - name: AD_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-adservice:8080'
        - name: CART_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-cartservice:8080'
        - name: CHECKOUT_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-checkoutservice:8080'
        - name: CURRENCY_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-currencyservice:8080'
        - name: PRODUCT_CATALOG_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-productcatalogservice:8080'
        - name: RECOMMENDATION_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-recommendationservice:8080'
        - name: SHIPPING_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-shippingservice:8080'
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: 'http://{{ include "sumo-opentelemetry-demo-otelagent-svc-name" . }}:4317'
        - name: FRONTEND_PORT
          value: "8080"
      podAnnotations: {}
      resources:
        limits:
          memory: 200Mi


    kafka:
      enabled: true
      useDefault:
        env: false
      ports:
        - name: plaintext
          value: 9092
        - name: controller
          value: 9093
      env:
        - name: KAFKA_ADVERTISED_LISTENERS
          value: 'PLAINTEXT://{{ include "otel-demo.name" . }}-kafka:9092'
      resources:
        limits:
          memory: 600Mi
      securityContext:
        runAsUser: 1000  # appuser
        runAsGroup: 1000
        runAsNonRoot: true

    loadgenerator:
      enabled: true
      useDefault:
        env: true

      imageOverride: {}
      schedulingRules:
        nodeSelector: {}
        affinity: {}
        tolerations: []
      serviceType: ClusterIP
      servicePort: 8089
      env:
        - name: FRONTEND_ADDR
          value: '{{ include "otel-demo.name" . }}-frontend:8080'
        - name: LOCUST_WEB_PORT
          value: "8089"
        - name: LOCUST_USERS
          value: "10"
        - name: LOCUST_HOST
          value: "http://$(FRONTEND_ADDR)"
        - name: LOCUST_HEADLESS
          value: "false"
        - name: LOCUST_AUTOSTART
          value: "true"
        - name: PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION
          value: python
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: 'http://{{ include "sumo-opentelemetry-demo-otelagent-svc-name" . }}:4317'
        - name: LOADGENERATOR_PORT
          value: "8089"
      podAnnotations: {}
      resources:
        limits:
          memory: 120Mi

    paymentService:
      enabled: true
      useDefault:
        env: true

      imageOverride: {}
      schedulingRules:
        nodeSelector: {}
        affinity: {}
        tolerations: []
      serviceType: ClusterIP
      servicePort: 8080
      env:
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: 'http://{{ include "sumo-opentelemetry-demo-otelagent-svc-name" . }}:4317'
        - name: PAYMENT_SERVICE_PORT
          value: "8080"
      podAnnotations: {}
      resources:
        limits:
          memory: 70Mi

    productCatalogService:
      enabled: true
      useDefault:
        env: true

      imageOverride: {}
      schedulingRules:
        nodeSelector: {}
        affinity: {}
        tolerations: []
      serviceType: ClusterIP
      servicePort: 8080
      env:
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: 'http://{{ include "sumo-opentelemetry-demo-otelagent-svc-name" . }}:4317'
        - name: PRODUCT_CATALOG_SERVICE_PORT
          value: "8080"
        - name: FEATURE_FLAG_GRPC_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-featureflagservice:50053'
      podAnnotations: {}
      resources:
        limits:
          memory: 20Mi

    recommendationService:
      enabled: true
      useDefault:
        env: true

      imageOverride: {}
      schedulingRules:
        nodeSelector: {}
        affinity: {}
        tolerations: []
      serviceType: ClusterIP
      servicePort: 8080
      env:
        - name: OTEL_PYTHON_LOG_CORRELATION
          value: "true"
        - name: PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION
          value: python
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: 'http://{{ include "sumo-opentelemetry-demo-otelagent-svc-name" . }}:4317'
        - name: FEATURE_FLAG_GRPC_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-featureflagservice:50053'
        - name: RECOMMENDATION_SERVICE_PORT
          value: "8080"
        - name: PRODUCT_CATALOG_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-productcatalogservice:8080'
      podAnnotations: {}
      resources:
        limits:
          memory: 500Mi            # This is high to enable supporting the recommendationCache feature flag use case

    shippingService:
      enabled: true
      useDefault:
        env: true

      imageOverride: {}
      schedulingRules:
        nodeSelector: {}
        affinity: {}
        tolerations: []
      serviceType: ClusterIP
      servicePort: 8080
      env:
        - name: PORT
          value: "8080"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: 'http://{{ include "sumo-opentelemetry-demo-otelagent-svc-name" . }}:4317'
        - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
          value: 'http://{{ include "sumo-opentelemetry-demo-otelagent-svc-name" . }}:4317'
        - name: SHIPPING_SERVICE_PORT
          value: "8080"
        - name: QUOTE_SERVICE_ADDR
          value: 'http://{{ include "otel-demo.name" . }}-quoteservice:8080'
      podAnnotations: {}
      resources:
        limits:
          memory: 20Mi

    quoteService:
      enabled: true
      useDefault:
        env: true

      imageOverride: {}
      schedulingRules:
        nodeSelector: {}
        affinity: {}
        tolerations: []
      serviceType: ClusterIP
      servicePort: 8080
      env:
        - name: OTEL_TRACES_SAMPLER
          value: "parentbased_always_on"
        - name: OTEL_TRACES_EXPORTER
          value: "otlp"
        - name: OTEL_EXPORTER_OTLP_TRACES_PROTOCOL
          value: "grpc"
        - name: OTEL_PHP_TRACES_PROCESSOR
          value: "simple"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: '{{ include "sumo-opentelemetry-demo-otelagent-svc-name" . }}:4317'
        - name: QUOTE_SERVICE_PORT
          value: "8080"
      podAnnotations: {}
      resources:
        limits:
          memory: 30Mi

  opentelemetry-collector:
    nameOverride: otelcol
    mode: deployment
    resources:
      limits:
        memory: 100Mi
    service:
      type: ClusterIP
    config:
      receivers:
        otlp:
          protocols:
            grpc:
            http:
              cors:
                allowed_origins:
                  - "http://*"
                  - "https://*"
      exporters:
        otlp:
          endpoint: '{{ .Release.Name }}-jaeger:4317'
          tls:
            insecure: true
      service:
        pipelines:
          traces:
            exporters:
              - logging
              - otlp
