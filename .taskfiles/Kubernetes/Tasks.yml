version: "3"

tasks:

  kubeconfig:
    desc: Download kubeconfig from a remote k3s master node
    vars:
      MASTER_USERNAME: '{{.MASTER_USERNAME | default "cftechwiz"}}'
      MASTER_HOST: '{{.MASTER_HOST | default "172.16.70.200"}}'
      KUBERNETES_API: '{{.KUBERNETES_API | default "172.16.0.254"}}'
    cmds:
    - rsync --verbose --progress --partial --rsync-path="sudo rsync" {{.MASTER_USERNAME}}@{{.MASTER_HOST}}:/etc/rancher/k3s/k3s.yaml "${KUBECONFIG}"
    - sed -i '' 's/127.0.0.1/{{.KUBERNETES_API}}/g' "${KUBECONFIG}"
    - chmod go-r "${KUBECONFIG}"

  schemas:
    desc: Pull the latest CRD schemas for this cluster
    cmds:
    - |
      mkdir -p {{.CLUSTER_DIR}}/schemas
      flux pull artifact oci://ghcr.io/cftechwiz/kubernetes-schemas-oci:latest \
          --output={{.CLUSTER_DIR}}/schemas

  mount:
    desc: Mount a PersistentVolumeClaim to a pod temporarily
    interactive: true
    vars:
      claim: '{{ or .claim (fail "PersistentVolumeClaim `claim` is required") }}'
      namespace: '{{.namespace | default "default"}}'
    cmds:
    - |
      kubectl run -n {{.namespace}} debug-{{.claim}} -i --tty --rm --image=null --privileged --overrides='
        {
          "apiVersion": "v1",
          "spec": {
            "containers": [
              {
                "name": "debug",
                "image": "ghcr.io/cftechwiz/alpine:rolling",
                "command": [
                  "/bin/bash"
                ],
                "stdin": true,
                "stdinOnce": true,
                "tty": true,
                "volumeMounts": [
                  {
                    "name": "config",
                    "mountPath": "/data/config"
                  }
                ]
              }
            ],
            "volumes": [
              {
                "name": "config",
                "persistentVolumeClaim": {
                  "claimName": "{{.claim}}"
                }
              }
            ],
            "restartPolicy": "Never"
          }
        }'
    preconditions:
    - kubectl -n {{.namespace}} get pvc {{.claim}}
