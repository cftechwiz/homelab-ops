---
- hosts:
    - master
    - worker
  become: true
  gather_facts: true
  any_errors_fatal: true
  pre_tasks:
    - name: Pausing for 5 seconds...
      ansible.builtin.pause:
        seconds: 5
  tasks:
    - name: Locale
      block:
        - name: Locale | Set timezone
          community.general.timezone:
            name: "{{ timezone | default('Etc/UTC') }}"
    - name: Gather installed packages
      ansible.builtin.package_facts:
        manager: auto
    - name: Packages | Uninstall Snap
      block:
        - name: Packages | Uninstall Snap | Check if snap is installed
          ansible.builtin.debug:
            msg: "snapd is installed"
          register: snapd_check
        - name: Packages | Uninstall Snap | Remove packages
          ansible.builtin.command: snap remove {{ item }}
          loop: ["yq", "core18", "lxd", "core20", "snapd"]
          when: snapd_check.failed is defined
        - name: Packages | Uninstall Snap | Remove snap from packages
          ansible.builtin.apt:
            name: snapd
            state: absent
            autoremove: true
      when: "'snapd' in ansible_facts.packages"
    - name: Networking & Initial Upgrades
      block:
        - name: Run "apt-get update"
          ansible.builtin.apt:
            update_cache: yes
        - name: Update all packages to their latest version
          ansible.builtin.apt:
            name: "*"
            state: latest
        - name: Upgrade the OS (apt-get dist-upgrade)
          ansible.builtin.apt:
            upgrade: dist
        - name: Packages | Install Network Manager
          ansible.builtin.apt:
            name: network-manager
            state: present
            update_cache: true
        - name: Packages | Install zsh
          ansible.builtin.apt:
            name: zsh
            state: present
            update_cache: true
        - name: Packages | Install OhMyZSH
          ansible.builtin.shell: |-
            curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh
        - name: Configure zshrc
        ansible.builtin.copy:
          mode: 0644
          src: ../playbooks/templates/.zshrc
          dest: ~/.zshrc
        - name: Packages | Un-Install rsyslog
          ansible.builtin.apt:
            name: rsyslog
            state: absent
            update_cache: true
        - name: Packages | Install syslog-ng
          ansible.builtin.apt:
            name: syslog-ng
            state: present
            update_cache: true
        - name: Make sure a service unit is running
          ansible.builtin.systemd:
            state: started
            name: NetworkManager.service
        - name: Networking | Set hostname to inventory hostname
          ansible.builtin.hostname:
            name: "{{ inventory_hostname }}"
        - name: Networking | Update /etc/hosts to include inventory hostname
          ansible.builtin.blockinfile:
            path: /etc/hosts
            block: |
              127.0.1.1   {{ inventory_hostname }}
        - name: System Configuration (2) | Patch Network Boot
          ansible.builtin.copy:
            mode: 0644
            src: ../playbooks/templates/00-installer-config.yml
            dest: /etc/netplan/00-installer-config.yaml
        - name: Syslog-NG | Setup json logging
          ansible.builtin.copy:
            mode: 0644
            src: ../playbooks/templates/syslog-ng/json.conf
            dest: /etc/syslog-ng/conf.d/json.conf
        - name: Syslog-NG | Setup k8s logging
          ansible.builtin.copy:
            mode: 0644
            src: ../playbooks/templates/syslog-ng/k8s.conf
            dest: /etc/syslog-ng/conf.d/k8s.conf        # - name: System Configuration (2) | Configure Bridge Network
        - name: Restart service syslog-ng, in all cases
          ansible.builtin.service:
            name: syslog-ng
            state: restarted
        #   ansible.builtin.template:
        #     mode: 0644
        #     src: ../playbooks/templates/05-bridge-config.yml.j2
        #     dest: /etc/netplan/05-bridge-config.yaml
    - name: Configure oTel HostMetrics
      block:
        - name: Check if Collector installed
          shell: otelcol-sumo -v
          register: otc_exists
          ignore_errors: True
          check_mode: false
          changed_when: False
        - name: Install OtelCollector
          ansible.builtin.shell: |-
            curl -sL https://github.com/SumoLogic/sumologic-otel-collector/releases/latest/download/install.sh | SUMOLOGIC_INSTALLATION_TOKEN={{SECRET_SUMOLOGIC_INSTALLATION_TOKEN}} sudo -E bash -s -- --install-hostmetrics --tag "host.group=cluster" --tag "deployment.environment=legacy" --api https://open-collectors.us2.sumologic.com/ || true
          when: otc_exists == 0
        - name: Install Otel Config
          ansible.builtin.copy:
            mode: 0644
            src: "../playbooks/templates/otel/{{ item }}"
            dest: "/etc/otelcol-sumo/conf.d/{{ item }}"
          loop:
            [collectormetrics.yaml, hostmetrics.yaml]
        - name: Install log templates
          ansible.builtin.template:
            mode: 0644
            src: ../playbooks/templates/otel/customfiles.yaml.j2
            dest: /etc/otelcol-sumo/conf.d/customfiles.yaml
        - name: Install log templates
          ansible.builtin.template:
            mode: 0644
            src: ../playbooks/templates/otel/jsonlogs.yaml.j2
            dest: /etc/otelcol-sumo/conf.d/jsonlogs.yaml
        - name: Finish Setting up Otel Config
          ansible.builtin.copy:
            mode: 0644
            src: ../playbooks/templates/otel/sumologic.yaml
            dest: /etc/otelcol-sumo/sumologic.yaml
        - name: Restart service otelcol-sumo, in all cases
          ansible.builtin.service:
            name: otelcol-sumo
            state: restarted
    - name: Continue with packages installation
      block:
        # - name: Packages | Install required packages
        #   ansible.builtin.apt:
        #     name: "{{ packages | default([]) }}"
        #     state: present
        #     update_cache: true
        - name: Packages | Remove leaf packages
          ansible.builtin.apt:
            autoremove: true
        - name: Packages | Enable automatic downloads of updates
          ansible.builtin.systemd:
            service: apt-daily.service
            enabled: true
            state: started
    - name: User Configuration
      block:
        - name: User Configuration | Add additional SSH public keys
          ansible.posix.authorized_key:
            user: "{{ ansible_user }}"
            key: "{{ item }}"
          loop: "{{ public_ssh_keys | default([]) }}"
    - name: System Configuration (1)
      block:
        - name: System Configuration (1) | Enable fstrim
          ansible.builtin.systemd:
            service: fstrim.timer
            enabled: true
    - name: System Configuration (2)
      block:
        - name: System Configuration (2) | Enable kernel modules now
          community.general.modprobe:
            name: "{{ item }}"
            state: present
          loop:
            [
              rbd,
              bridge,
              br_netfilter,
              ip_tables,
              ip6_tables,
              ip_vs,
              netlink_diag,
              nf_nat,
              overlay,
              xt_conntrack,
              nf_conntrack,
              vxlan,
              overlay,
            ]
        - name: System Configuration (2) | Enable kernel modules on boot
          ansible.builtin.copy:
            mode: 0644
            content: "{{ item }}"
            dest: "/etc/modules-load.d/{{ item }}.conf"
          loop:
            [
              rbd,
              bridge,
              br_netfilter,
              ip_tables,
              ip6_tables,
              ip_vs,
              netlink_diag,
              nf_nat,
              overlay,
              xt_conntrack,
              nf_conntrack,
              vxlan,
              overlay,
            ]
        - name: System Configuration (2) | Set sysctls
          ansible.posix.sysctl:
            name: "{{ item.key }}"
            value: "{{ item.value }}"
            sysctl_file: /etc/sysctl.d/99-kubernetes.conf
            reload: true
          with_dict: "{{ sysctl_config }}"
          vars:
            sysctl_config:
              fs.aio-max-nr: 524288
              fs.inotify.max_queued_events: 1048576
              fs.inotify.max_user_watches: 1048576
              fs.inotify.max_user_instances: 1048576
              kernel.dmesg_restrict: 1
              kernel.keys.maxbytes: 20000000
              kernel.keys.maxkeys: 2000
              net.ipv4.ip_forward: 1
              net.ipv4.conf.all.forwarding: 1
              net.ipv4.conf.all.rp_filter: 0
              net.ipv4.conf.default.rp_filter: 0
              net.ipv6.conf.all.forwarding: 1
              net.bridge.bridge-nf-call-iptables: 1
              net.bridge.bridge-nf-call-ip6tables: 1
              net.ipv4.neigh.default.gc_thresh3: 8192
              net.ipv6.neigh.default.gc_thresh3: 8192
              vm.max_map_count: 262144
        - name: System Configuration (3) | Set * Nofile soft
          pam_limits:
            domain: "*"
            limit_type: soft
            limit_item: nofile
            value: 1048576
        - name: System Configuration (3) | Set * nofile hard
          pam_limits:
            domain: "*"
            limit_type: hard
            limit_item: nofile
            value: 1048576
        - name: System Configuration (3) | Set root nofile soft
          pam_limits:
            domain: rooot
            limit_type: soft
            limit_item: nofile
            value: 1048576
        - name: System Configuration (3) | Set root nofile hard
          pam_limits:
            domain: root
            limit_type: hard
            limit_item: nofile
            value: 1048576
        - name: System Configuration (3) | Set * memlock soft
          pam_limits:
            domain: "*"
            limit_type: soft
            limit_item: memlock
            value: unlimited
        - name: System Configuration (3) | Set * memlock hard
          pam_limits:
            domain: "*"
            limit_type: hard
            limit_item: memlock
            value: unlimited
        - name: System Configuration (3) | Set root memlock soft
          pam_limits:
            domain: root
            limit_type: soft
            limit_item: memlock
            value: unlimited
        - name: System Configuration (3) | Set root memlock hard
          pam_limits:
            domain: root
            limit_type: hard
            limit_item: memlock
            value: unlimited
        - name: System Configuration (2) | Disable swap at runtime
          ansible.builtin.command: swapoff -a
          when: ansible_swaptotal_mb > 0
        - name: System Configuration (2) | Disable swap at boot
          ansible.posix.mount:
            name: "{{ item }}"
            fstype: swap
            state: absent
          loop: ["none", "swap"]
        - name: System Configuration (2) | Disable mitigations
          ansible.builtin.replace:
            path: /etc/default/grub
            regexp: '^(GRUB_CMDLINE_LINUX=(?:(?![" ]{{ item.key | regex_escape }}=).)*)(?:[" ]{{ item.key | regex_escape }}=\S+)?(.*")$'
            replace: '\1 {{ item.key }}={{ item.value }}\2'
          with_dict: "{{ grub_config }}"
          vars:
            grub_config:
              apparmor: "0"
              mitigations: "off"
          register: grub_status
        - name: System Configuration (2) | Reconfigure grub and initramfs
          ansible.builtin.command: update-grub
          when: grub_status.changed
    - name: System Configuration (4)
      block:
        - name: System Configuration (4) | Disable ufw
          ansible.builtin.systemd:
            service: ufw.service
            enabled: false
            masked: true
            state: stopped
        - name: System Configuration (4) | Enable fstrim
          ansible.builtin.systemd:
            service: fstrim.timer
            enabled: true
        - name: System Configuration (4) | Disable cloud-init
          ansible.builtin.file:
            dest: /etc/cloud/cloud-init.disabled
            state: touch
            owner: root
            mode: 0775
            modification_time: preserve
            access_time: preserve
      # - name: finalize configuration with storage configuration
      #   block:
      #     - name: Perform a discovery on 172.16.70.155 and show available target nodes
      #       community.general.open_iscsi:
      #         show_nodes: true
      #         discover: true
      #         ip: 172.16.70.155

      #     - name: Connect to the named target, after updating the local persistent database (cache)
      #       community.general.open_iscsi:
      #         login: true
      #         target: iqn.2004-04.com.qnap:ts-832px:iscsi.server1.67e5db
      #       when: ansible_host == server1

      #     - name: Connect to the named target, after updating the local persistent database (cache)
      #       community.general.open_iscsi:
      #         login: true
      #         target: iqn.2004-04.com.qnap:ts-832px:iscsi.server2.67e5db
      #       when: ansible_host == server2

      #     - name: Connect to the named target, after updating the local persistent database (cache)
      #       community.general.open_iscsi:
      #         login: true
      #         target: iqn.2004-04.com.qnap:ts-832px:iscsi.server3.67e5db
      #       when: ansible_host == server3

      #     - name: Connect to the named target, after updating the local persistent database (cache)
      #       community.general.open_iscsi:
      #         login: true
      #         target: iqn.2004-04.com.qnap:ts-832px:iscsi.shared.67e5db

      notify: Reboot
  handlers:
    - name: Reboot
      ansible.builtin.reboot:
        msg: Rebooting nodes
